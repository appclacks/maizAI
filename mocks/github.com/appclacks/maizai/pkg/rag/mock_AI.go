// Code generated by mockery v2.53.3. DO NOT EDIT.

package rag

import (
	context "context"

	aggregates "github.com/appclacks/maizai/pkg/rag/aggregates"

	mock "github.com/stretchr/testify/mock"
)

// MockAI is an autogenerated mock type for the AI type
type MockAI struct {
	mock.Mock
}

type MockAI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAI) EXPECT() *MockAI_Expecter {
	return &MockAI_Expecter{mock: &_m.Mock}
}

// Embedding provides a mock function with given fields: ctx, query
func (_m *MockAI) Embedding(ctx context.Context, query aggregates.EmbeddingQuery) (*aggregates.EmbeddingAnswer, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Embedding")
	}

	var r0 *aggregates.EmbeddingAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.EmbeddingQuery) (*aggregates.EmbeddingAnswer, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.EmbeddingQuery) *aggregates.EmbeddingAnswer); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.EmbeddingAnswer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aggregates.EmbeddingQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAI_Embedding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Embedding'
type MockAI_Embedding_Call struct {
	*mock.Call
}

// Embedding is a helper method to define mock.On call
//   - ctx context.Context
//   - query aggregates.EmbeddingQuery
func (_e *MockAI_Expecter) Embedding(ctx interface{}, query interface{}) *MockAI_Embedding_Call {
	return &MockAI_Embedding_Call{Call: _e.mock.On("Embedding", ctx, query)}
}

func (_c *MockAI_Embedding_Call) Run(run func(ctx context.Context, query aggregates.EmbeddingQuery)) *MockAI_Embedding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aggregates.EmbeddingQuery))
	})
	return _c
}

func (_c *MockAI_Embedding_Call) Return(_a0 *aggregates.EmbeddingAnswer, _a1 error) *MockAI_Embedding_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAI_Embedding_Call) RunAndReturn(run func(context.Context, aggregates.EmbeddingQuery) (*aggregates.EmbeddingAnswer, error)) *MockAI_Embedding_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAI creates a new instance of MockAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAI {
	mock := &MockAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
