// Code generated by mockery v2.53.3. DO NOT EDIT.

package assistant

import (
	aggregates "github.com/appclacks/maizai/pkg/assistant/aggregates"

	context "context"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/appclacks/maizai/pkg/shared"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Query provides a mock function with given fields: ctx, messages, options
func (_m *MockProvider) Query(ctx context.Context, messages []shared.Message, options aggregates.QueryOptions) (*aggregates.Answer, error) {
	ret := _m.Called(ctx, messages, options)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *aggregates.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []shared.Message, aggregates.QueryOptions) (*aggregates.Answer, error)); ok {
		return rf(ctx, messages, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []shared.Message, aggregates.QueryOptions) *aggregates.Answer); ok {
		r0 = rf(ctx, messages, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.Answer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []shared.Message, aggregates.QueryOptions) error); ok {
		r1 = rf(ctx, messages, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockProvider_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []shared.Message
//   - options aggregates.QueryOptions
func (_e *MockProvider_Expecter) Query(ctx interface{}, messages interface{}, options interface{}) *MockProvider_Query_Call {
	return &MockProvider_Query_Call{Call: _e.mock.On("Query", ctx, messages, options)}
}

func (_c *MockProvider_Query_Call) Run(run func(ctx context.Context, messages []shared.Message, options aggregates.QueryOptions)) *MockProvider_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]shared.Message), args[2].(aggregates.QueryOptions))
	})
	return _c
}

func (_c *MockProvider_Query_Call) Return(_a0 *aggregates.Answer, _a1 error) *MockProvider_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_Query_Call) RunAndReturn(run func(context.Context, []shared.Message, aggregates.QueryOptions) (*aggregates.Answer, error)) *MockProvider_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, messages, options
func (_m *MockProvider) Stream(ctx context.Context, messages []shared.Message, options aggregates.QueryOptions) (<-chan aggregates.Event, error) {
	ret := _m.Called(ctx, messages, options)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 <-chan aggregates.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []shared.Message, aggregates.QueryOptions) (<-chan aggregates.Event, error)); ok {
		return rf(ctx, messages, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []shared.Message, aggregates.QueryOptions) <-chan aggregates.Event); ok {
		r0 = rf(ctx, messages, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan aggregates.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []shared.Message, aggregates.QueryOptions) error); ok {
		r1 = rf(ctx, messages, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type MockProvider_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []shared.Message
//   - options aggregates.QueryOptions
func (_e *MockProvider_Expecter) Stream(ctx interface{}, messages interface{}, options interface{}) *MockProvider_Stream_Call {
	return &MockProvider_Stream_Call{Call: _e.mock.On("Stream", ctx, messages, options)}
}

func (_c *MockProvider_Stream_Call) Run(run func(ctx context.Context, messages []shared.Message, options aggregates.QueryOptions)) *MockProvider_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]shared.Message), args[2].(aggregates.QueryOptions))
	})
	return _c
}

func (_c *MockProvider_Stream_Call) Return(_a0 <-chan aggregates.Event, _a1 error) *MockProvider_Stream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_Stream_Call) RunAndReturn(run func(context.Context, []shared.Message, aggregates.QueryOptions) (<-chan aggregates.Event, error)) *MockProvider_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
