// Code generated by mockery v2.53.3. DO NOT EDIT.

package assistant

import (
	aggregates "github.com/appclacks/maizai/pkg/rag/aggregates"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRag is an autogenerated mock type for the Rag type
type MockRag struct {
	mock.Mock
}

type MockRag_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRag) EXPECT() *MockRag_Expecter {
	return &MockRag_Expecter{mock: &_m.Mock}
}

// Match provides a mock function with given fields: ctx, query
func (_m *MockRag) Match(ctx context.Context, query aggregates.SearchQuery) ([]aggregates.DocumentChunk, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 []aggregates.DocumentChunk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.SearchQuery) ([]aggregates.DocumentChunk, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, aggregates.SearchQuery) []aggregates.DocumentChunk); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregates.DocumentChunk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, aggregates.SearchQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRag_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type MockRag_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - ctx context.Context
//   - query aggregates.SearchQuery
func (_e *MockRag_Expecter) Match(ctx interface{}, query interface{}) *MockRag_Match_Call {
	return &MockRag_Match_Call{Call: _e.mock.On("Match", ctx, query)}
}

func (_c *MockRag_Match_Call) Run(run func(ctx context.Context, query aggregates.SearchQuery)) *MockRag_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(aggregates.SearchQuery))
	})
	return _c
}

func (_c *MockRag_Match_Call) Return(_a0 []aggregates.DocumentChunk, _a1 error) *MockRag_Match_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRag_Match_Call) RunAndReturn(run func(context.Context, aggregates.SearchQuery) ([]aggregates.DocumentChunk, error)) *MockRag_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRag creates a new instance of MockRag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRag(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRag {
	mock := &MockRag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
