// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: document.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createDocument = `-- name: CreateDocument :exec
INSERT INTO document (
  id, name, description, created_at)
VALUES (
  $1, $2, $3, $4
)
`

type CreateDocumentParams struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) error {
	_, err := q.db.Exec(ctx, createDocument,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
	)
	return err
}

const createDocumentChunk = `-- name: CreateDocumentChunk :exec
INSERT INTO document_chunk (
  id, document_id, fragment, embedding, created_at)
VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateDocumentChunkParams struct {
	ID         pgtype.UUID
	DocumentID pgtype.UUID
	Fragment   pgtype.Text
	Embedding  pgvector.Vector
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) CreateDocumentChunk(ctx context.Context, arg CreateDocumentChunkParams) error {
	_, err := q.db.Exec(ctx, createDocumentChunk,
		arg.ID,
		arg.DocumentID,
		arg.Fragment,
		arg.Embedding,
		arg.CreatedAt,
	)
	return err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM document
WHERE id = $1
`

func (q *Queries) DeleteDocument(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDocument, id)
	return err
}

const deleteDocumentChunk = `-- name: DeleteDocumentChunk :exec
DELETE FROM document_chunk
WHERE id = $1
`

func (q *Queries) DeleteDocumentChunk(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDocumentChunk, id)
	return err
}

const deleteDocumentChunkForDocument = `-- name: DeleteDocumentChunkForDocument :exec
DELETE FROM document_chunk
WHERE document_id = $1
`

func (q *Queries) DeleteDocumentChunkForDocument(ctx context.Context, documentID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDocumentChunkForDocument, documentID)
	return err
}

const findClosestChunks = `-- name: FindClosestChunks :many
SELECT id, document_id, fragment, embedding, created_at
FROM document_chunk
ORDER BY embedding <-> $1 LIMIT $2
`

type FindClosestChunksParams struct {
	Embedding pgvector.Vector
	Limit     int32
}

func (q *Queries) FindClosestChunks(ctx context.Context, arg FindClosestChunksParams) ([]DocumentChunk, error) {
	rows, err := q.db.Query(ctx, findClosestChunks, arg.Embedding, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocumentChunk
	for rows.Next() {
		var i DocumentChunk
		if err := rows.Scan(
			&i.ID,
			&i.DocumentID,
			&i.Fragment,
			&i.Embedding,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocument = `-- name: GetDocument :one
SELECT id, name, description, created_at FROM document
WHERE id = $1
`

func (q *Queries) GetDocument(ctx context.Context, id pgtype.UUID) (Document, error) {
	row := q.db.QueryRow(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listDocumentChunksForDocument = `-- name: ListDocumentChunksForDocument :many
SELECT id, fragment, created_at, embedding
FROM document_chunk
WHERE document_id = $1
`

type ListDocumentChunksForDocumentRow struct {
	ID        pgtype.UUID
	Fragment  pgtype.Text
	CreatedAt pgtype.Timestamp
	Embedding pgvector.Vector
}

func (q *Queries) ListDocumentChunksForDocument(ctx context.Context, documentID pgtype.UUID) ([]ListDocumentChunksForDocumentRow, error) {
	rows, err := q.db.Query(ctx, listDocumentChunksForDocument, documentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDocumentChunksForDocumentRow
	for rows.Next() {
		var i ListDocumentChunksForDocumentRow
		if err := rows.Scan(
			&i.ID,
			&i.Fragment,
			&i.CreatedAt,
			&i.Embedding,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, name, description, created_at
FROM document
`

func (q *Queries) ListDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.Query(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
