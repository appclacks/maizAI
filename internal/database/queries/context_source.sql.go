// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: context_source.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanContextSourcesForContext = `-- name: CleanContextSourcesForContext :exec
DELETE FROM context_source
WHERE context_id=$1 OR source_context_id=$1
`

func (q *Queries) CleanContextSourcesForContext(ctx context.Context, contextID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, cleanContextSourcesForContext, contextID)
	return err
}

const createContexSource = `-- name: CreateContexSource :exec
INSERT INTO context_source (
  context_id, source_context_id
) VALUES (
  $1, $2
)
`

type CreateContexSourceParams struct {
	ContextID       pgtype.UUID
	SourceContextID pgtype.UUID
}

func (q *Queries) CreateContexSource(ctx context.Context, arg CreateContexSourceParams) error {
	_, err := q.db.Exec(ctx, createContexSource, arg.ContextID, arg.SourceContextID)
	return err
}

const deleteContextSource = `-- name: DeleteContextSource :exec
DELETE FROM context_source
WHERE context_id=$1 AND source_context_id=$2
`

type DeleteContextSourceParams struct {
	ContextID       pgtype.UUID
	SourceContextID pgtype.UUID
}

func (q *Queries) DeleteContextSource(ctx context.Context, arg DeleteContextSourceParams) error {
	_, err := q.db.Exec(ctx, deleteContextSource, arg.ContextID, arg.SourceContextID)
	return err
}

const getContextSourcesForContext = `-- name: GetContextSourcesForContext :many
SELECT source_context_id FROM context_source
WHERE context_id=$1
ORDER BY ordering
`

func (q *Queries) GetContextSourcesForContext(ctx context.Context, contextID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getContextSourcesForContext, contextID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var source_context_id pgtype.UUID
		if err := rows.Scan(&source_context_id); err != nil {
			return nil, err
		}
		items = append(items, source_context_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
