// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: system_prompt.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSystemPrompt = `-- name: CreateSystemPrompt :exec
INSERT INTO system_prompt (
  id, name, description, content, created_at
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateSystemPromptParams struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	Content     string
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateSystemPrompt(ctx context.Context, arg CreateSystemPromptParams) error {
	_, err := q.db.Exec(ctx, createSystemPrompt,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Content,
		arg.CreatedAt,
	)
	return err
}

const deleteSystemPrompt = `-- name: DeleteSystemPrompt :exec
DELETE FROM system_prompt
WHERE id = $1
`

func (q *Queries) DeleteSystemPrompt(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSystemPrompt, id)
	return err
}

const getSystemPrompt = `-- name: GetSystemPrompt :one
SELECT id, name, description, content, created_at
FROM system_prompt
WHERE id = $1
`

func (q *Queries) GetSystemPrompt(ctx context.Context, id pgtype.UUID) (SystemPrompt, error) {
	row := q.db.QueryRow(ctx, getSystemPrompt, id)
	var i SystemPrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getSystemPromptByName = `-- name: GetSystemPromptByName :one
SELECT id, name, description, content, created_at
FROM system_prompt
WHERE name = $1
`

func (q *Queries) GetSystemPromptByName(ctx context.Context, name string) (SystemPrompt, error) {
	row := q.db.QueryRow(ctx, getSystemPromptByName, name)
	var i SystemPrompt
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listSystemPrompts = `-- name: ListSystemPrompts :many
SELECT id, name, description, content, created_at
FROM system_prompt
`

func (q *Queries) ListSystemPrompts(ctx context.Context) ([]SystemPrompt, error) {
	rows, err := q.db.Query(ctx, listSystemPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemPrompt
	for rows.Next() {
		var i SystemPrompt
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSystemPrompt = `-- name: UpdateSystemPrompt :exec
UPDATE system_prompt
SET content = $2
WHERE id = $1
`

type UpdateSystemPromptParams struct {
	ID      pgtype.UUID
	Content string
}

func (q *Queries) UpdateSystemPrompt(ctx context.Context, arg UpdateSystemPromptParams) error {
	_, err := q.db.Exec(ctx, updateSystemPrompt, arg.ID, arg.Content)
	return err
}
