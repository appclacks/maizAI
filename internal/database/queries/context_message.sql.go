// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: context_message.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContextMessage = `-- name: CreateContextMessage :one
INSERT INTO context_message (
  id, role, content, created_at, context_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING ordering, id, role, content, created_at, context_id
`

type CreateContextMessageParams struct {
	ID        pgtype.UUID
	Role      string
	Content   string
	CreatedAt pgtype.Timestamp
	ContextID pgtype.UUID
}

func (q *Queries) CreateContextMessage(ctx context.Context, arg CreateContextMessageParams) (ContextMessage, error) {
	row := q.db.QueryRow(ctx, createContextMessage,
		arg.ID,
		arg.Role,
		arg.Content,
		arg.CreatedAt,
		arg.ContextID,
	)
	var i ContextMessage
	err := row.Scan(
		&i.Ordering,
		&i.ID,
		&i.Role,
		&i.Content,
		&i.CreatedAt,
		&i.ContextID,
	)
	return i, err
}

const deleteContextMessage = `-- name: DeleteContextMessage :exec
DELETE FROM context_message
WHERE id = $1
`

func (q *Queries) DeleteContextMessage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContextMessage, id)
	return err
}

const deleteContextMessagesForContext = `-- name: DeleteContextMessagesForContext :exec
DELETE FROM context_message
WHERE context_id = $1
`

func (q *Queries) DeleteContextMessagesForContext(ctx context.Context, contextID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContextMessagesForContext, contextID)
	return err
}

const getContextMessages = `-- name: GetContextMessages :many
SELECT id, role, content, created_at FROM context_message
WHERE context_id = $1
ORDER BY ordering
`

type GetContextMessagesRow struct {
	ID        pgtype.UUID
	Role      string
	Content   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetContextMessages(ctx context.Context, contextID pgtype.UUID) ([]GetContextMessagesRow, error) {
	rows, err := q.db.Query(ctx, getContextMessages, contextID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContextMessagesRow
	for rows.Next() {
		var i GetContextMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContextMessage = `-- name: UpdateContextMessage :exec
UPDATE context_message
SET content = $2, role=$3
WHERE id = $1
`

type UpdateContextMessageParams struct {
	ID      pgtype.UUID
	Content string
	Role    string
}

func (q *Queries) UpdateContextMessage(ctx context.Context, arg UpdateContextMessageParams) error {
	_, err := q.db.Exec(ctx, updateContextMessage, arg.ID, arg.Content, arg.Role)
	return err
}
